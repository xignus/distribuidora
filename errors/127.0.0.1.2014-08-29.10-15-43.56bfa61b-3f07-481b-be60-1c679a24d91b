(dp1
S'output'
p2
S"<type 'exceptions.AttributeError'> 'str' object has no attribute 'contacto'"
p3
sS'layer'
p4
S'/home/marco/trabajo/experimental/web2py/applications/distribuidora/views/appadmin.html'
p5
sS'code'
p6
S'response.write(\'<!--[if HTML5]><![endif]-->\\n<!DOCTYPE html>\\n<!-- paulirish.com/2008/conditional-stylesheets-vs-css-hacks-answer-neither/ -->\\n<!--[if lt IE 7]><html class="ie ie6 ie-lte9 ie-lte8 ie-lte7 no-js" lang="\', escape=False)\nresponse.write(T.accepted_language or \'en\')\nresponse.write(\'"> <![endif]-->\\n<!--[if IE 7]><html class="ie ie7 ie-lte9 ie-lte8 ie-lte7 no-js" lang="\', escape=False)\nresponse.write(T.accepted_language or \'en\')\nresponse.write(\'"> <![endif]-->\\n<!--[if IE 8]><html class="ie ie8 ie-lte9 ie-lte8 no-js" lang="\', escape=False)\nresponse.write(T.accepted_language or \'en\')\nresponse.write(\'"> <![endif]-->\\n<!--[if IE 9]><html class="ie9 ie-lte9 no-js" lang="\', escape=False)\nresponse.write(T.accepted_language or \'en\')\nresponse.write(\'"> <![endif]-->\\n<!--[if (gt IE 9)|!(IE)]><!--> <html class="no-js" lang="\', escape=False)\nresponse.write(T.accepted_language or \'en\')\nresponse.write(\'"> <!--<![endif]-->\\n  <head>\\n    <title>\', escape=False)\nresponse.write(response.title or request.application)\nresponse.write(\'</title>\\n    <!--[if !HTML5]>\\n\\t<meta http-equiv="X-UA-Compatible" content="IE=edge\', escape=False)\nresponse.write(not request.is_local and \',chrome=1\' or \'\')\nresponse.write(\'">\\n\\t<![endif]-->\\n    <!-- www.phpied.com/conditional-comments-block-downloads/ -->\\n    <!-- Always force latest IE rendering engine\\n\\t (even in intranet) & Chrome Frame\\n\\t Remove this if you use the .htaccess -->\\n    \\n    <meta charset="utf-8" />\\n\\n    <!-- http://dev.w3.org/html5/markup/meta.name.html -->\\n    <meta name="application-name" content="\', escape=False)\nresponse.write(request.application)\nresponse.write(\'" />\\n\\n    <!-- Speaking of Google, don\\\'t forget to set your site up:\\n\\t http://google.com/webmasters -->\\n    <meta name="google-site-verification" content="" />\\n\\n    <!--  Mobile Viewport Fix\\n          j.mp/mobileviewport & davidbcalhoun.com/2010/viewport-metatag\\n          device-width: Occupy full width of the screen in its current orientation\\n          initial-scale = 1.0 retains dimensions instead of zooming out if page height > device height\\n          user-scalable = yes allows the user to zoom in -->\\n    <meta name="viewport" content="width=device-width, initial-scale=1.0" />\\n\\n    <link rel="shortcut icon" href="\', escape=False)\nresponse.write(URL(\'static\',\'images/favicon.ico\'))\nresponse.write(\'" type="image/x-icon">\\n    <link rel="apple-touch-icon" href="\', escape=False)\nresponse.write(URL(\'static\',\'images/favicon.png\'))\nresponse.write(\'">\\n\\n    <!-- All JavaScript at the bottom, except for Modernizr which enables\\n\\t HTML5 elements & feature detects -->\\n    <script src="\', escape=False)\nresponse.write(URL(\'static\',\'js/modernizr.custom.js\'))\nresponse.write(\'"></script>\\n\\n    <!-- include stylesheets -->\\n\\n    <link href="\', escape=False)\nresponse.write(URL(\'static\',\'css/bootstrap.min.css\'))\nresponse.write(\'" type="text/css" media="screen" rel="stylesheet" />\\n    <link href="\', escape=False)\nresponse.write(URL(\'static\',\'css/web2py.css\'))\nresponse.write(\'" type="text/css" media="screen" rel="stylesheet" />\\n    <link href="\', escape=False)\nresponse.write(URL(\'static\',\'css/fa/css/font-awesome.min.css\'))\nresponse.write(\'" type="text/css" media="screen" rel="stylesheet" />\\n    <link href="\', escape=False)\nresponse.write(URL(\'static\',\'css/xignus.css\'))\nresponse.write(\'" type="text/css" media="screen" rel="stylesheet" />\\n    \\n    \', escape=False)\nresponse.write(\'<script type="text/javascript"><!--\\n    // These variables are used by the web2py_ajax_init function in web2py_ajax.js (which is loaded below).\\n    var w2p_ajax_confirm_message = "\', escape=False)\nresponse.write(T(\'Are you sure you want to delete this object?\'))\nresponse.write(\'";\\n    var w2p_ajax_disable_with_message = "\', escape=False)\nresponse.write(T(\'Working...\'))\nresponse.write(\'";\\n    var w2p_ajax_date_format = "\', escape=False)\nresponse.write(T(\'%Y-%m-%d\'))\nresponse.write(\'";\\n    var w2p_ajax_datetime_format = "\', escape=False)\nresponse.write(T(\'%Y-%m-%d %H:%M:%S\'))\nresponse.write(\'";\\n    var ajax_error_500 = \\\'\', escape=False)\nresponse.write(T.M(\'An error occured, please [[reload %s]] the page\') % URL(args=request.args, vars=request.get_vars))\nresponse.write("\'\\n    //--></script>\\n", escape=False)\nresponse.files.insert(0,URL(\'static\',\'js/jquery.js\'))\nresponse.files.insert(1,URL(\'static\',\'css/calendar.css\'))\nresponse.files.insert(2,URL(\'static\',\'js/calendar.js\'))\nresponse.files.insert(3,URL(\'static\',\'js/web2py.js\'))\nresponse.include_meta()\nresponse.include_files()\nresponse.write(\'\\n\', escape=False)\nresponse.write(\'\\n\\n    \', escape=False)\n# using sidebars need to know what sidebar you want to use\nleft_sidebar_enabled = globals().get(\'left_sidebar_enabled\',False)\nright_sidebar_enabled = globals().get(\'right_sidebar_enabled\',False)\nmiddle_columns = {0:\'span12\',1:\'span9\',2:\'span6\'}[\n(left_sidebar_enabled and 1 or 0)+(right_sidebar_enabled and 1 or 0)]\nresponse.write(\'\\n\\n    <!-- uncomment here to load jquery-ui\\n\\t <link rel="stylesheet" href="http://ajax.googleapis.com/ajax/libs/jqueryui/1.10.3/themes/ui-lightness/jquery-ui.css" type="text/css" media="all" />\\n\\t <script src="http://ajax.googleapis.com/ajax/libs/jqueryui/1.10.3/jquery-ui.min.js" type="text/javascript"></script>\\n\\t uncomment to load jquery-ui //-->\\n    <noscript><link href="\', escape=False)\nresponse.write(URL(\'static\', \'css/web2py_bootstrap_nojs.css\'))\nresponse.write(\'" rel="stylesheet" type="text/css" /></noscript>\\n    \', escape=False)\nresponse.write(\'\\n  </head>\\n\\n  <body>\\n    <!-- Navbar ================================================== -->\\n    <div class="row">\\n      <div class="flash">\', escape=False)\nresponse.write(response.flash or \'\')\nresponse.write(\'</div>\\n      <header class="container"><!-- encabezado -->\\n\\t<div class="row">\\n\\t  <nav class="navbar pull" role="navigation">\\n\\t    \', escape=False)\nis_mobile=request.user_agent().is_mobile\nresponse.write(\'\\n            <!-- the next tag is necessary for bootstrap menus, do not remove -->\\n            <button type="button" class="btn btn-navbar" data-toggle="collapse" data-target=".nav-collapse" style="\', escape=False)\nresponse.write(\'display:none;\' if not is_mobile else \'\')\nresponse.write(\'">\\n              <span class="icon-bar"></span>\\n              <span class="icon-bar"></span>\\n              <span class="icon-bar"></span>\\n            </button>\\n            \', escape=False)\nresponse.write(response.logo or \'\')\nresponse.write(\'\\n\\t    <div class="\', escape=False)\nresponse.write(\'nav-collapse\' if is_mobile else \'nav\')\nresponse.write(\' pull-right ">\\n              \', escape=False)\nif response.menu:\n    response.write(\'\\n              \', escape=False)\n    response.write(MENU(response.menu, _class=\'mobile-menu navbar\' if is_mobile else \'nav navbar-nav\',mobile=is_mobile,li_class=\'dropdown\',ul_class=\'dropdown-menu\'))\n    response.write(\'\\n              \', escape=False)\n    pass\nresponse.write(\'\\n            </div><!--/.nav-collapse -->\\n\\t  </nav>\\n\\t</div>\\n      </header> <!-- fin encabezado -->\\n\\n      <div class="container">\\n\\t\', escape=False)\nresponse.write(\'\\n<script><!--\\n    jQuery(document).ready(function(){\\n    jQuery("table.sortable tbody tr").mouseover( function() {\\n    jQuery(this).addClass("highlight"); }).mouseout( function() {\\n    jQuery(this).removeClass("highlight"); });\\n    jQuery(\\\'table.sortable tbody tr:odd\\\').addClass(\\\'odd\\\');\\n    jQuery(\\\'table.sortable tbody tr:even\\\').addClass(\\\'even\\\');\\n});\\n//--></script>\\n\\n\', escape=False)\nif request.function==\'index\':\n    response.write(\'\\n<h2>\', escape=False)\n    response.write(T("Available Databases and Tables"))\n    response.write(\'</h2>\\n  \', escape=False)\n    if not databases:\n        response.write(T("No databases in this application"))\n        pass\n    response.write(\'\\n<table>\\n  \', escape=False)\n    for db in sorted(databases):\n        response.write(\'\\n    \', escape=False)\n        for table in databases[db].tables:\n            response.write(\'\\n      \', escape=False)\n            qry=\'%s.%s.id>0\'%(db,table)\n            response.write(\'\\n      \', escape=False)\n            tbl=databases[db][table]\n            response.write(\'\\n      \', escape=False)\n            if hasattr(tbl,\'_primarykey\'):\n                response.write(\'\\n        \', escape=False)\n                if tbl._primarykey:\n                    response.write(\'\\n            \', escape=False)\n                    firstkey=tbl[tbl._primarykey[0]]\n                    response.write(\'\\n            \', escape=False)\n                    if firstkey.type in [\'string\',\'text\']:\n                        response.write(\'\\n              \', escape=False)\n                        qry=\'%s.%s.%s!=""\'%(db,table,firstkey.name)\n                        response.write(\'\\n            \', escape=False)\n                    else:\n                        response.write(\'\\n              \', escape=False)\n                        qry=\'%s.%s.%s>0\'%(db,table,firstkey.name)\n                        response.write(\'\\n            \', escape=False)\n                        pass\n                    response.write(\'\\n        \', escape=False)\n                else:\n                    response.write(\'\\n             \', escape=False)\n                    qry=\'\'\n                    response.write(\'\\n        \', escape=False)\n                    pass\n                response.write(\'\\n      \', escape=False)\n                pass\n            response.write(\'\\n  <tr>\\n    <th style="font-size: 1.75em;">\\n      \', escape=False)\n            response.write(A("%s.%s" % (db,table),_href=URL(\'select\',args=[db],vars=dict(query=qry))))\n            response.write(\'\\n    </th>\\n    <td>\\n      \', escape=False)\n            response.write(A(str(T(\'New Record\')),_href=URL(\'insert\',args=[db,table]),_class="btn"))\n            response.write(\'\\n    </td>\\n  </tr>\\n  \', escape=False)\n            pass\n        response.write(\'\\n  \', escape=False)\n        pass\n    response.write(\'\\n</table>\\n\\n\', escape=False)\nelif request.function==\'select\':\n    response.write(\'\\n  <h2>\', escape=False)\n    response.write(XML(str(T("Database %s select"))%A(request.args[0],_href=URL(\'index\'))))\n    response.write(\'\\n  </h2>\\n  \', escape=False)\n    if tb:\n        response.write(\'\\n  <h3>\', escape=False)\n        response.write(T(\'Traceback\'))\n        response.write(\'</h3>\\n  <pre>\\n    \', escape=False)\n        response.write(tb)\n        response.write(\'\\n  </pre>\\n  \', escape=False)\n        pass\n    response.write(\'\\n  \', escape=False)\n    if table:\n        response.write(\'\\n  \', escape=False)\n        response.write(A(str(T(\'New Record\')),_href=URL(\'insert\',args=[request.args[0],table]),_class="btn"))\n        response.write(\'<br/><br/>\\n    <h3>\', escape=False)\n        response.write(T("Rows in Table"))\n        response.write(\'</h3><br/>\\n   \', escape=False)\n    else:\n        response.write(\'\\n    <h3>\', escape=False)\n        response.write(T("Rows selected"))\n        response.write(\'</h3><br/>\\n   \', escape=False)\n        pass\n    response.write(\'\\n   \', escape=False)\n    response.write(form)\n    response.write(\'\\n   <p>\', escape=False)\n    response.write(T(\'The "query" is a condition like "db.table1.field1==\\\'value\\\'". Something like "db.table1.field1==db.table2.field2" results in a SQL JOIN.\'))\n    response.write(\'<br/>\\n      \', escape=False)\n    response.write(T(\'Use (...)&(...) for AND, (...)|(...) for OR, and ~(...)  for NOT to build more complex queries.\'))\n    response.write(\'<br/>\\n      \', escape=False)\n    response.write(T(\'"update" is an optional expression like "field1=\\\'newvalue\\\'". You cannot update or delete the results of a JOIN\'))\n    response.write(\'</p>\\n    <br/><br/>\\n    <h4>\', escape=False)\n    response.write(T("%s selected", nrows))\n    response.write(\'</h4>\\n    \', escape=False)\n    if start>0:\n        response.write(A(T(\'previous %s rows\') % step,_href=URL(\'select\',args=request.args[0],vars=dict(start=start-step)),_class="btn"))\n        pass\n    response.write(\'\\n    \', escape=False)\n    if stop<nrows:\n        response.write(A(T(\'next %s rows\') % step,_href=URL(\'select\',args=request.args[0],vars=dict(start=start+step)),_class="btn"))\n        pass\n    response.write(\'\\n    \', escape=False)\n    if rows:\n        response.write(\'\\n       <div style="overflow:auto; width:80%;">\\n       \', escape=False)\n        linkto = lambda f, t, r: URL(\'update\', args=[request.args[0], r, f]) if f else "#"\n        response.write(\'\\n       \', escape=False)\n        upload=URL(\'download\',args=request.args[0])\n        response.write(\'\\n       \', escape=False)\n        response.write(SQLTABLE(rows,linkto,upload,orderby=True,_class=\'sortable\'))\n        response.write(\'\\n       </div>\\n    \', escape=False)\n        pass\n    response.write(\'\\n    <br/><br/><h3>\', escape=False)\n    response.write(T("Import/Export"))\n    response.write(\'</h3><br/>\\n    <a href="\', escape=False)\n    response.write(URL(\'csv\',args=request.args[0],vars=dict(query=query)))\n    response.write(\'" class="btn">\', escape=False)\n    response.write(T("export as csv file"))\n    response.write(\'</a>\\n  \', escape=False)\n    response.write(formcsv or \'\')\n    response.write(\'\\n\\n\', escape=False)\nelif request.function==\'insert\':\n    response.write(\'\\n  <h2>\', escape=False)\n    response.write(T("Database"))\n    response.write(\' \', escape=False)\n    response.write(A(request.args[0],_href=URL(\'index\')))\n    response.write(\'\\n    \', escape=False)\n    if hasattr(table,\'_primarykey\'):\n        response.write(\'\\n      \', escape=False)\n        fieldname=table._primarykey[0]\n        response.write(\'\\n      \', escape=False)\n        dbname=request.args[0]\n        response.write(\'\\n      \', escape=False)\n        tablename=request.args[1]\n        response.write(\'\\n      \', escape=False)\n        cond = table[fieldname].type in [\'string\',\'text\'] and \'!=""\' or \'>0\'\n        response.write(\'\\n      \', escape=False)\n        response.write(T("Table"))\n        response.write(\' \', escape=False)\n        response.write(A(tablename,_href=URL(\'select\',args=dbname,vars=dict(query=\'%s.%s.%s%s\'%(dbname,tablename,fieldname,cond)))))\n        response.write(\'\\n    \', escape=False)\n    else:\n        response.write(\'\\n      \', escape=False)\n        response.write(T("Table"))\n        response.write(\' \', escape=False)\n        response.write(A(request.args[1],_href=URL(\'select\',args=request.args[0],vars=dict(query=\'%s.%s.id>0\'%tuple(request.args[:2])))))\n        response.write(\'\\n    \', escape=False)\n        pass\n    response.write(\'\\n  </h2>\\n  <h3>\', escape=False)\n    response.write(T("New Record"))\n    response.write(\'</h3><br/>\\n  \', escape=False)\n    response.write(form)\n    response.write(\'\\n\', escape=False)\nelif request.function==\'update\':\n    response.write(\'\\n  <h2>\', escape=False)\n    response.write(T("Database"))\n    response.write(\' \', escape=False)\n    response.write(A(request.args[0],_href=URL(\'index\')))\n    response.write(\'\\n    \', escape=False)\n    if hasattr(table,\'_primarykey\'):\n        response.write(\'\\n      \', escape=False)\n        fieldname=request.vars.keys()[0]\n        response.write(\'\\n      \', escape=False)\n        dbname=request.args[0]\n        response.write(\'\\n      \', escape=False)\n        tablename=request.args[1]\n        response.write(\'\\n      \', escape=False)\n        cond = table[fieldname].type in [\'string\',\'text\'] and \'!=""\' or \'>0\'\n        response.write(\'\\n      \', escape=False)\n        response.write(T("Table"))\n        response.write(\' \', escape=False)\n        response.write(A(tablename,_href=URL(\'select\',args=dbname,vars=dict(query=\'%s.%s.%s%s\'%(dbname,tablename,fieldname,cond)))))\n        response.write(\'\\n      \', escape=False)\n        response.write(T("Record"))\n        response.write(\' \', escape=False)\n        response.write(A(\'%s=%s\'%request.vars.items()[0],_href=URL(\'update\',args=request.args[:2],vars=request.vars)))\n        response.write(\'\\n    \', escape=False)\n    else:\n        response.write(\'\\n      \', escape=False)\n        response.write(T("Table"))\n        response.write(\' \', escape=False)\n        response.write(A(request.args[1],_href=URL(\'select\',args=request.args[0],vars=dict(query=\'%s.%s.id>0\'%tuple(request.args[:2])))))\n        response.write(\'\\n      \', escape=False)\n        response.write(T("Record id"))\n        response.write(\' \', escape=False)\n        response.write(A(request.args[2],_href=URL(\'update\',args=request.args[:3])))\n        response.write(\'\\n    \', escape=False)\n        pass\n    response.write(\'\\n  </h2>\\n  <h3>\', escape=False)\n    response.write(T("Edit current record"))\n    response.write(\'</h3><br/><br/>\', escape=False)\n    response.write(form)\n    response.write(\'\\n\\n\', escape=False)\nelif request.function==\'state\':\n    response.write(\'\\n  <h2>\', escape=False)\n    response.write(T("Internal State"))\n    response.write(\'</h2>\\n  <h3>\', escape=False)\n    response.write(T("Current request"))\n    response.write(\'</h3>\\n  \', escape=False)\n    response.write(BEAUTIFY(request))\n    response.write(\'\\n  <br/><h3>\', escape=False)\n    response.write(T("Current response"))\n    response.write(\'</h3>\\n  \', escape=False)\n    response.write(BEAUTIFY(response))\n    response.write(\'\\n  <br/><h3>\', escape=False)\n    response.write(T("Current session"))\n    response.write(\'</h3>\\n  \', escape=False)\n    response.write(BEAUTIFY(session))\n    response.write(\'\\n\\n\\n\', escape=False)\nelif request.function == \'ccache\':\n    response.write(\'\\n<h2>\', escape=False)\n    T("Cache")\n    response.write(\'</h2>\\n<div class="list">\\n\\n  <div class="list-header">\\n    <h3>\', escape=False)\n    T("Statistics")\n    response.write(\'</h3>\\n  </div>\\n\\n  <div class="content">\\n    <h4>\', escape=False)\n    response.write(T("Overview"))\n    response.write(\'</h4>\\n    <p>\', escape=False)\n    response.write(T.M("Number of entries: **%s**", total[\'entries\']))\n    response.write(\'</p>\\n    \', escape=False)\n    if total[\'entries\'] > 0:\n        response.write(\'\\n      <p>\', escape=False)\n        response.write(T.M("Hit Ratio: **%(ratio)s%%** (**%(hits)s** %%{hit(hits)} and **%(misses)s** %%{miss(misses})",\n        dict(ratio=total[\'ratio\'], hits=total[\'hits\'], misses=total[\'misses\'])))\n        response.write(\'\\n     </p>\\n    <p>\\n      \', escape=False)\n        response.write(T("Size of cache:"))\n        response.write(\'\\n      \', escape=False)\n        if object_stats:\n            response.write(\'\\n        \', escape=False)\n            response.write(T.M("**%(items)s** %%{item(items)}, **%(bytes)s** %%{byte(bytes)}", dict(items=total[\'objects\'], bytes=total[\'bytes\'])))\n            response.write(\'\\n        \', escape=False)\n            if total[\'bytes\'] > 524287:\n                response.write(\'\\n          \', escape=False)\n                response.write(T.M("(**%.0d MB**)", total[\'bytes\'] / 1048576))\n                response.write(\'\\n        \', escape=False)\n                pass\n            response.write(\'\\n      \', escape=False)\n        else:\n            response.write(\'\\n        \', escape=False)\n            response.write(T.M("**not available** (requires the Python [[guppy http://pypi.python.org/pypi/guppy/ popup]] library)"))\n            response.write(\'\\n      \', escape=False)\n            pass\n        response.write(\'\\n    </p>\\n    <p>\\n      \', escape=False)\n        response.write(T.M("Cache contains items up to **%(hours)02d** %%{hour(hours)} **%(min)02d** %%{minute(min)} **%(sec)02d** %%{second(sec)} old.",\n        dict(hours=total[\'oldest\'][0], min=total[\'oldest\'][1], sec=total[\'oldest\'][2])))\n        response.write(\'\\n    </p>\\n    \', escape=False)\n        response.write(BUTTON(T(\'Cache Keys\'), _onclick=\'jQuery("#all_keys").toggle();\'))\n        response.write(\'\\n    <div class="hidden" id="all_keys">\\n      \', escape=False)\n        response.write(total[\'keys\'])\n        response.write(\'\\n    </div>\\n    <br />\\n    \', escape=False)\n        pass\n    response.write(\'\\n\\n    <h4>\', escape=False)\n    response.write(T("RAM"))\n    response.write(\'</h4>\\n    <p>\', escape=False)\n    response.write(T.M("Number of entries: **%s**", ram[\'entries\']))\n    response.write(\'</p>\\n    \', escape=False)\n    if ram[\'entries\'] > 0:\n        response.write(\'\\n    <p>\', escape=False)\n        response.write(T.M("Hit Ratio: **%(ratio)s%%** (**%(hits)s** %%{hit(hits)} and **%(misses)s** %%{miss(misses)})",\n        dict( ratio=ram[\'ratio\'], hits=ram[\'hits\'], misses=ram[\'misses\'])))\n        response.write(\'\\n    </p>\\n    <p>\\n      \', escape=False)\n        response.write(T("Size of cache:"))\n        response.write(\'\\n      \', escape=False)\n        if object_stats:\n            response.write(\'\\n        \', escape=False)\n            response.write(T.M("**%(items)s** items, **%(bytes)s** %%{byte(bytes)}", dict(items=ram[\'objects\'], bytes=ram[\'bytes\'])))\n            response.write(\'\\n        \', escape=False)\n            if ram[\'bytes\'] > 524287:\n                response.write(\'\\n          \', escape=False)\n                response.write(T.M("(**%.0d MB**)", ram[\'bytes\'] / 10485576))\n                response.write(\'\\n        \', escape=False)\n                pass\n            response.write(\'\\n      \', escape=False)\n        else:\n            response.write(\'\\n        \', escape=False)\n            response.write(T.M("``**not available**``:red (requires the Python [[guppy http://pypi.python.org/pypi/guppy/ popup]] library)"))\n            response.write(\'\\n      \', escape=False)\n            pass\n        response.write(\'\\n    </p>\\n    <p>\\n      \', escape=False)\n        response.write(T.M("RAM contains items up to **%(hours)02d** %%{hour(hours)} **%(min)02d** %%{minute(min)} **%(sec)02d** %%{second(sec)} old.",\n        dict(hours=ram[\'oldest\'][0], min=ram[\'oldest\'][1], sec=ram[\'oldest\'][2])))\n        response.write(\'\\n    </p>\\n    \', escape=False)\n        response.write(BUTTON(T(\'RAM Cache Keys\'), _onclick=\'jQuery("#ram_keys").toggle();\'))\n        response.write(\'\\n    <div class="hidden" id="ram_keys">\\n      \', escape=False)\n        response.write(ram[\'keys\'])\n        response.write(\'\\n    </div>\\n    <br />\\n    \', escape=False)\n        pass\n    response.write(\'\\n\\n    <h4>\', escape=False)\n    response.write(T("DISK"))\n    response.write(\'</h4>\\n    <p>\', escape=False)\n    response.write(T.M("Number of entries: **%s**", disk[\'entries\']))\n    response.write(\'</p>\\n    \', escape=False)\n    if disk[\'entries\'] > 0:\n        response.write(\'\\n      <p>\\n      \', escape=False)\n        response.write(T.M("Hit Ratio: **%(ratio)s%%** (**%(hits)s** %%{hit(hits)} and **%(misses)s** %%{miss(misses)})",\n        dict(ratio=disk[\'ratio\'], hits=disk[\'hits\'], misses=disk[\'misses\'])))\n        response.write(\'\\n      </p>\\n      <p>\\n      \', escape=False)\n        response.write(T("Size of cache:"))\n        response.write(\'\\n      \', escape=False)\n        if object_stats:\n            response.write(\'\\n        \', escape=False)\n            response.write(T.M("**%(items)s** %%{item(items)}, **%(bytes)s** %%{byte(bytes)}", dict( items=disk[\'objects\'], bytes=disk[\'bytes\'])))\n            response.write(\'\\n        \', escape=False)\n            if disk[\'bytes\'] > 524287:\n                response.write(\'\\n          \', escape=False)\n                response.write(T.M("(**%.0d MB**)", disk[\'bytes\'] / 1048576))\n                response.write(\'\\n        \', escape=False)\n                pass\n            response.write(\'\\n      \', escape=False)\n        else:\n            response.write(\'\\n        \', escape=False)\n            response.write(T.M("``**not available**``:red (requires the Python [[guppy http://pypi.python.org/pypi/guppy/ popup]] library)"))\n            response.write(\'\\n      \', escape=False)\n            pass\n        response.write(\'\\n      </p>\\n      <p>\\n      \', escape=False)\n        response.write(T.M("DISK contains items up to **%(hours)02d** %%{hour(hours)} **%(min)02d** %%{minute(min)} **%(sec)02d** %%{second(sec)} old.",\n        dict(hours=disk[\'oldest\'][0], min=disk[\'oldest\'][1], sec=disk[\'oldest\'][2])))\n        response.write(\'\\n      </p>\\n      \', escape=False)\n        response.write(BUTTON(T(\'Disk Cache Keys\'), _onclick=\'jQuery("#disk_keys").toggle();\'))\n        response.write(\'\\n      <div class="hidden" id="disk_keys">\\n      \', escape=False)\n        response.write(disk[\'keys\'])\n        response.write(\'\\n      </div>\\n      <br />\\n    \', escape=False)\n        pass\n    response.write(\'\\n  </div>\\n\\n  <div class="list-header">\\n    <h3>\', escape=False)\n    response.write(T("Manage Cache"))\n    response.write(\'</h3>\\n  </div>\\n\\n  <div class="content">\\n    <p>\\n      \', escape=False)\n    response.write(form)\n    response.write(\'\\n    </p>\\n  </div>\\n</div>\\n<div class="clear"></div>\\n\', escape=False)\n    pass\nresponse.write(\'\\n\\n\', escape=False)\nif request.function==\'graph_model\':\n    response.write(\'\\n<h2>\', escape=False)\n    response.write(T("Graph Model"))\n    response.write(\'</h2>\\n  \', escape=False)\n    if not pgv:\n        response.write(\'\\n    \', escape=False)\n        response.write(T(\'pygraphviz library not found\'))\n        response.write(\'\\n  \', escape=False)\n    elif not databases:\n        response.write(\'\\n    \', escape=False)\n        response.write(T("No databases in this application"))\n        response.write(\'\\n  \', escape=False)\n    else:\n        response.write(\'\\t   \\n    <div class="btn-group">\\n      <a class="btn dropdown-toggle" data-toggle="dropdown" href="#">\\n        <i class="icon-download"></i> \', escape=False)\n        response.write(T(\'Save model as...\'))\n        response.write(\'\\n        <span class="caret"></span>\\n      </a>\\n      <ul class="dropdown-menu">\\n          <li><a href="\', escape=False)\n        response.write(URL(\'appadmin\', \'bg_graph_model\', args=[\'png\']))\n        response.write(\'">png</a></li>\\n          <li><a href="\', escape=False)\n        response.write(URL(\'appadmin\', \'bg_graph_model\', args=[\'svg\']))\n        response.write(\'">svg</a></li>\\n          <li><a href="\', escape=False)\n        response.write(URL(\'appadmin\', \'bg_graph_model\', args=[\'pdf\']))\n        response.write(\'">pdf</a></li>\\n          <li><a href="\', escape=False)\n        response.write(URL(\'appadmin\', \'bg_graph_model\', args=[\'ps\']))\n        response.write(\'">ps</a></li>          \\n          <li><a href="\', escape=False)\n        response.write(URL(\'appadmin\', \'bg_graph_model\', args=[\'dot\']))\n        response.write(\'">dot</a></li>                                   \\n      </ul>\\n    </div>\\n    <br />\\n    \', escape=False)\n        response.write(IMG(_src=URL(\'appadmin\', \'bg_graph_model\')))\n        response.write(\'\\n  \', escape=False)\n        pass\n    response.write(\'\\n\', escape=False)\n    pass\nresponse.write(\'\\n\\n\', escape=False)\nif request.function == \'manage\':\n    response.write(\'\\n<h2>\', escape=False)\n    response.write(heading)\n    response.write(\'</h2>\\n<ul class="nav nav-tabs">\\n  \', escape=False)\n    for k, tablename in enumerate(tablenames):\n        response.write(\'\\n  <li\', escape=False)\n        response.write(XML(\' class="active"\') if k == 0 else \'\')\n        response.write(\'>\\n    <a href="#table-\', escape=False)\n        response.write(tablename)\n        response.write(\'" data-toggle="tab">\', escape=False)\n        response.write(labels[k])\n        response.write(\'</a>\\n  </li>\\n  \', escape=False)\n        pass\n    response.write(\'\\n</ul>\\n\\n<div class="tab-content">\\n  \', escape=False)\n    for k, tablename in enumerate(tablenames):\n        response.write(\'\\n  <div class="tab-pane\', escape=False)\n        response.write(XML(\' active\') if k == 0 else \'\')\n        response.write(\'" id="table-\', escape=False)\n        response.write(tablename)\n        response.write(\'">\\n    \', escape=False)\n        response.write(LOAD(f=\'manage.load\', args=[request.args(0), k], ajax=True))\n        response.write(\'\\n  </div>\\n  \', escape=False)\n        pass\n    response.write(\'\\n</div>\\n\', escape=False)\n    pass\nresponse.write(\'\\n\', escape=False)\nresponse.write(\'\\n      </div> <!-- /container -->\\n\\n      <!-- Footer ================================================== -->\\n      <footer class="container"><!-- pie -->\\n\\t<div class="row">\\n\\t  <div class="col-sm-4">\\n\\t    <h3><span class="fa fa-group"></span> Nosotros</h3>\\n\\t    <p>Somos una empresa familiar </p>\\n\\t  </div>\\n\\n\\t  <div class="col-sm-4">\\n\\t    <h3><span class="fa fa-cubes"></span> Productos</h3>\\n\\t    <p>Algunos de nuestros productos</p>\\n\\t  </div>\\n\\n\\t  <div class="col-sm-4">\\n\\t    <h3><span class="fa fa-envelope"></span> Contacto</h3>\\n\\t    \', escape=False)\nresponse.write(crud.create(db.contacto))\nresponse.write(\'\\n\\t  </div>\\n\\t</div>\\n      </footer><!-- fin pie -->\\n      <div class="clearfix"></div>\\n\\n      <!-- The javascript =============================================\\n\\t   (Placed at the end of the document so the pages load faster) -->\\n      <script src="\', escape=False)\nresponse.write(URL(\'static\',\'js/bootstrap.min.js\'))\nresponse.write(\'"></script>\\n      <script src="\', escape=False)\nresponse.write(URL(\'static\',\'js/web2py_bootstrap.js\'))\nresponse.write(\'"></script>\\n      <script src="\', escape=False)\nresponse.write(URL(\'static\',\'js/flexslider.js\'))\nresponse.write(\'"></script>\\n      <script src="\', escape=False)\nresponse.write(URL(\'static\',\'js/pyp.js\'))\nresponse.write(\'"></script>\\n      <!--[if lt IE 7 ]>\\n\\t  <script src="\', escape=False)\nresponse.write(URL(\'static\',\'js/dd_belatedpng.js\'))\nresponse.write(\'"></script>\\n\\t  <script> DD_belatedPNG.fix(\\\'img, .png_bg\\\'); //fix any <img> or .png_bg background-images </script>\\n\\t  <![endif]-->      \\n  </body>\\n</html>\\n\\n\', escape=False)'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/marco/trabajo/experimental/web2py/gluon/restricted.py", line 221, in restricted\n    exec ccode in environment\n  File "/home/marco/trabajo/experimental/web2py/applications/distribuidora/views/appadmin.html", line 452, in <module>\nAttributeError: \'str\' object has no attribute \'contacto\'\n'
p11
s.